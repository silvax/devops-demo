---
  - hosts: all
    sudo: true

    roles:
      # This must come first so that the role tag is set.
      - tagbase-configure

    tasks:
      - name: gather ec2 facts
        action: ec2_facts

      - name: get environment tag
        action: ec2_tag resource={{ ansible_ec2_instance_id }} region={{ ansible_ec2_placement_region }} state=list
        register: allTags

      - name: determine if instance is ebs backed or instance store
        command: "aws ec2 describe-images --image-ids {{ ansible_ec2_ami_id }} --query='Images[0].RootDeviceType' --region {{ ansible_ec2_placement_region }} --output=text"
        register: root_device_type

      # set the hosname for the instance
      - hostname: name={{ allTags.tags.role }}-{{ ansible_ec2_local_ipv4|replace(".", "-") }}

      - lineinfile: dest=/etc/hosts regexp='^127.0.0.1' line='127.0.0.1 {{ allTags.tags.role }}-{{ ansible_ec2_local_ipv4|replace(".", "-") }}.localdomain {{ allTags.tags.role }}-{{ ansible_ec2_local_ipv4|replace(".", "-") }} localhost localhost.localdomain'

      - name: determine if we are a spot instance or not
        shell: "aws ec2 describe-instances --region {{ ansible_ec2_placement_region }}  --instance-ids {{ ansible_ec2_instance_id }} --query='Reservations[0].Instances[0].SpotInstanceRequestId' --output text"
        register: spot_instance
      - debug: var=spot_instance

      - group_by: key={{ allTags.tags.environment }}

      - group_by: key={{ allTags.tags.role }}

      - group_by: key={{ root_device_type.stdout }}

      - group_by: key={{ ansible_ec2_instance_type }}

      - debug: var=root_device_type

  # This must go first as mounting volumes over existing volumes causes issues for services writing to those locations
  - hosts : i2.2xlarge:c3.2xlarge:c3.xlarge:c3.4xlarge:i2.xlarge:c3.large:&instance-store
    sudo: true

    roles:
      - instance-store-raid
      - instance-store-volumes

  - hosts: all
    sudo: true

    roles:
     - newrelic-configure
     - newrelicjava-configure
     - newrelicnode-configure
     - sumologic-configure
     - service-discovery
     - { role: spot-termination-notifier, when: spot_instance.stdout != "None" }

  - hosts: stage:prod:prod-apse2:prod-euw1
    sudo: true

    roles:
      - jumpcloud-configure

  - hosts: test:stage:prod:prod-apse2:prod-euw1
    sudo: true

    roles:
     - ossec-configure

  - hosts: bastion:openvpn:turnserver:connect_proxy_legacy:realtime-proxy:nginx-proxy:jslave:realtime:pairing:auth:edge_proxy:public_api:upload:onboarding:carrier_pigeon:&stage:prod:prod-apse2:prod-euw1
    sudo: true

    roles:
      - alertlogic-configure
