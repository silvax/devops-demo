---

  - name: unmount xvdb if mounted
    mount: name=/media/ephemeral0 src=/dev/xvdb state=unmounted fstype=ext3

  - name: check if the volume group has been created
    shell: pvdisplay|grep 'VG Name'|cut -c25-
    register: volume_group_created
    ignore_errors: yes

  - name: check if log volume has been created
    shell: lvdisplay /dev/vg.data/log|grep 'LV Path'|cut -c26-
    register: log_volume_created
    ignore_errors: yes

  - name: check if tmp volume has been created
    shell: lvdisplay /dev/vg.data/tmp|grep 'LV Path'|cut -c26-
    register: tmp_volume_created
    ignore_errors: yes

  - name: check if data volume has been created
    shell: lvdisplay /dev/vg.data/data|grep 'LV Path'|cut -c26-
    register: data_volume_created
    ignore_errors: yes

  - name: check if filesystem has been created for log
    shell: file -sL /dev/mapper/vg.data-log|grep ext4
    register: log_fs_created
    ignore_errors: yes

  - name: check if filesystem has been created for tmp
    shell: file -sL /dev/mapper/vg.data-tmp|grep ext4
    register: tmp_fs_created
    ignore_errors: yes

  - name: check if filesystem has been created for data
    shell: file -sL /dev/mapper/vg.data-data|grep ext4
    register: data_fs_created
    ignore_errors: yes

  - name: create volume group for instance store instances
    lvg: vg=vg.data pvs=/dev/md0 state=present force=yes
    when: volume_group_created.stdout != "vg.data"

  - name: create logical volume for instance store log
    lvol: vg=vg.data lv=log size={{ log_vol_size }}
    when: log_volume_created.stdout != "/dev/vg.data/log"

  - name: create logical volume for instance store tmp
    lvol: vg=vg.data lv=tmp size={{ tmp_vol_size }}
    when: tmp_volume_created.stdout != "/dev/vg.data/tmp"

  - name: create logical volume for instance store data
    lvol: vg=vg.data lv=data size={{ data_vol_size }}
    when: data_volume_created.stdout != "/dev/vg.data/data"

  - name: create filesystem for log vol
    filesystem: fstype=ext4 dev=/dev/mapper/vg.data-log
    when: log_fs_created.stdout != "ext4"

  - name: create filesystem for tmp
    filesystem: fstype=ext4 dev=/dev/mapper/vg.data-tmp
    when: tmp_fs_created.stdout != "ext4"

  - name: create filesystem for data
    filesystem: fstype=ext4 dev=/dev/mapper/vg.data-data
    when: data_fs_created.stdout != "ext4"

  - name: stop services
    service: name={{ item }} state=stopped
    with_items:
    - supervisord
    - rsyslog

  - file: path=/home/ec2-user/log_backup state=directory

  - name: backup log directory tree
    shell: "find /var/log -mount -type d > /home/ec2-user/log_directory_structure.txt"

  - name: backup log directory acls
    shell: "getfacl -R --absolute-names /var/log > /home/ec2-user/log_directory_acls.txt"

  - name: mount the log volume
    mount: name=/var/log src=/dev/mapper/vg.data-log fstype=ext4 state=mounted

  - name: mount the data volume
    mount: name=/data src=/dev/mapper/vg.data-data fstype=ext4 state=mounted

  - name: mount the tmp volume
    mount: name=/tmp src=/dev/mapper/vg.data-tmp fstype=ext4 state=mounted

  - name: set permissions on tmp directory
    file: path=/tmp state=directory mode=1777

  - name: restore log directory tree
    shell: "xargs mkdir -p < /home/ec2-user/log_directory_structure.txt"

  - name: restore log directory acls
    shell: "setfacl --restore=/home/ec2-user/log_directory_acls.txt"
    ignore_errors: yes

  - name: start services
    service: name={{ item }} state=started
    with_items:
    - supervisord
    - rsyslog
